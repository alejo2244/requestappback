const { PrismaClient } = require('@prisma/client');
const prisma = new PrismaClient();

// ‚úÖ Create advance request
exports.createAdvanceRequest = async (req, res) => {
  try {
    const request = await prisma.advanceRequest.create({
      data: {
        ...req.body,
        requestDate: new Date(req.body.requestDate), // aseg√∫rate que venga en formato v√°lido
      },
    });
    res.status(201).json(request);
  } catch (error) {
    res.status(400).json({ error: error.message });
  }
};

// üìÑ Get all requests
exports.getAllAdvanceRequests = async (req, res) => {
  const requests = await prisma.advanceRequest.findMany({
    include: { company: true },
  });
  res.json(requests);
};

// üîç Get one request by ID
exports.getAdvanceRequestById = async (req, res) => {
  const { id } = req.params;
  const request = await prisma.advanceRequest.findUnique({
    where: { id: Number(id) },
    include: { company: true },
  });
  if (!request) return res.status(404).json({ error: 'Request not found' });
  res.json(request);
};

// ‚úèÔ∏è Update request
exports.updateAdvanceRequest = async (req, res) => {
  const { id } = req.params;
  try {
    const updated = await prisma.advanceRequest.update({
      where: { id: Number(id) },
      data: req.body,
    });
    res.json(updated);
  } catch (error) {
    res.status(400).json({ error: error.message });
  }
};

exports.updateAdvanceRequestStatus = async (req, res) => {
  const { id } = req.params;
  const { statusId } = req.body;

  if (!statusId) {
    return res.status(400).json({ error: 'Missing statusId in request body.' });
  }

  try {
    const updated = await prisma.advanceRequest.update({
      where: { id: Number(id) },
      data: { statusId: Number(statusId) },
    });
    res.json({ message: 'Status updated successfully', updated });
  } catch (error) {
    res.status(400).json({ error: error.message });
  }
};

// ‚ùå Delete request
exports.deleteAdvanceRequest = async (req, res) => {
  const { id } = req.params;
  try {
    await prisma.advanceRequest.delete({ where: { id: Number(id) } });
    res.json({ message: 'Request deleted successfully' });
  } catch (error) {
    res.status(400).json({ error: error.message });
  }
};
const PDFDocument = require('pdfkit');

exports.downloadPDF = async (req, res) => {
  const { id } = req.params;

  const solicitud = await prisma.advanceRequest.findUnique({
    where: { id: Number(id) },
    include: { company: true }
  });

  if (!solicitud) {
    return res.status(404).json({ error: 'Solicitud no encontrada' });
  }

  const doc = new PDFDocument({ margin: 40 });
  res.setHeader('Content-Type', 'application/pdf');
  res.setHeader('Content-Disposition', `attachment; filename=anticipo_${solicitud.consecutive}.pdf`);
  doc.pipe(res);

  // üè∑Ô∏è T√≠tulo
  doc.fontSize(16).text('APROBACI√ìN DE ANTICIPO', { align: 'center', underline: true });
  doc.moveDown();

  // üßæ Datos generales
  doc.fontSize(12);
  doc.text(`Consecutivo: ${solicitud.consecutive}`);
  doc.text(`Fecha: ${new Date(solicitud.requestDate).toLocaleDateString('es-CO')}`);
  doc.text(`Contrato: CONT-227`);
  doc.text(`NIT: ${solicitud.company.taxId}`);
  doc.text(`Proveedor: ${solicitud.supplierName}`);
  doc.text(`Tel√©fono: ${solicitud.supplierPhone}`);
  doc.text(`Direcci√≥n: ${solicitud.supplierAddress}`);
  doc.moveDown();

  // üßÆ Detalles financieros
  doc.text(`Centro de costos: ${solicitud.costCenter}`);
  doc.text(`Concepto: ${solicitud.concept}`);
  doc.text(`Monto base: $${solicitud.baseAmount.toLocaleString()}`);
  doc.text(`IVA: ${solicitud.vatRate} - $${solicitud.vatTotal.toLocaleString()}`);
  doc.text(`Total: $${solicitud.totalAdvance.toLocaleString()}`);
  doc.text(`Porcentaje aprobado: ${solicitud.approvedPercentage}%`);
  doc.text(`Valor a transferir: $${solicitud.amountToTransfer.toLocaleString()}`);
  doc.moveDown();

  // üìù Observaciones
  doc.font('Helvetica-Bold').text('Observaciones:', { underline: true });
  doc.font('Helvetica').text(solicitud.notes || 'N/A');
  doc.moveDown();

  // üë§ Firmas
  doc.text(`Responsable: ${solicitud.responsible}`);
  doc.text(`Preparado por: ${solicitud.preparedBy}`);
  doc.text(`Aprobado por: ${solicitud.approvedBy}`);
  doc.moveDown();

  // üìå Instrucciones en rojo
  doc.fillColor('red').fontSize(10);
  doc.text('* Por favor diligenciar los campos sombreados de color gris');
  doc.text('* El anticipo debe ser autorizado, de acuerdo al destino del anticipo');
  doc.text('* Radicar por tr√°mite interno en SGD.');
  doc.text('* Debe venir debidamente firmado en su totalidad');
  doc.fillColor('black'); // volver al color normal

  doc.end();
};