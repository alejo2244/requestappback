const { PrismaClient } = require('@prisma/client');
const prisma = new PrismaClient();

// ✅ Create advance request
exports.createAdvanceRequest = async (req, res) => {
  try {
    const request = await prisma.advanceRequest.create({
      data: {
        ...req.body,
        requestDate: new Date(req.body.requestDate), // asegúrate que venga en formato válido
      },
    });
    res.status(201).json(request);
  } catch (error) {
    res.status(400).json({ error: error.message });
  }
};

// 📄 Get all requests
exports.getAllAdvanceRequests = async (req, res) => {
  const requests = await prisma.advanceRequest.findMany({
    include: { company: true },
  });
  res.json(requests);
};

// 🔍 Get one request by ID
exports.getAdvanceRequestById = async (req, res) => {
  const { id } = req.params;
  const request = await prisma.advanceRequest.findUnique({
    where: { id: Number(id) },
    include: { company: true },
  });
  if (!request) return res.status(404).json({ error: 'Request not found' });
  res.json(request);
};

// ✏️ Update request
exports.updateAdvanceRequest = async (req, res) => {
  const { id } = req.params;
  try {
    const updated = await prisma.advanceRequest.update({
      where: { id: Number(id) },
      data: req.body,
    });
    res.json(updated);
  } catch (error) {
    res.status(400).json({ error: error.message });
  }
};

exports.updateAdvanceRequestStatus = async (req, res) => {
  const { id } = req.params;
  const { statusId } = req.body;

  if (!statusId) {
    return res.status(400).json({ error: 'Missing statusId in request body.' });
  }

  try {
    const updated = await prisma.advanceRequest.update({
      where: { id: Number(id) },
      data: { statusId: Number(statusId) },
    });
    res.json({ message: 'Status updated successfully', updated });
  } catch (error) {
    res.status(400).json({ error: error.message });
  }
};

// ❌ Delete request
exports.deleteAdvanceRequest = async (req, res) => {
  const { id } = req.params;
  try {
    await prisma.advanceRequest.delete({ where: { id: Number(id) } });
    res.json({ message: 'Request deleted successfully' });
  } catch (error) {
    res.status(400).json({ error: error.message });
  }
};

const PDFDocument = require('pdfkit');
const puppeteer = require('puppeteer');

function generarHTML(solicitud, logoUrl) {
  return `
  <html>
    <head>
      <meta charset="UTF-8"/>
      <style>
        body {
          font-family: Arial, sans-serif;
          margin: 40px;
          font-size: 12px;
        }
        /* Encabezado */
        .header-table {
          width: 100%;
          border-collapse: collapse;
          margin-bottom: 20px;
        }
        .header-table td {
          vertical-align: middle;
        }
        .logo {
          width: 90px;
          height: auto;
        }
        .title {
          text-align: center;
          font-size: 18px;
          font-weight: bold;
        }
        /* Tabla horizontal de datos financieros */
        .fin-table {
          width: 100%;
          border-collapse: collapse;
          margin-top: 15px;
          table-layout: fixed;
        }
        .fin-table td {
          border: 1px solid #ccc;
          padding: 4px 6px;
          font-size: 11px;
          text-align: center;
        }
        .label {
          background-color: #f0f0f0;
          font-weight: bold;
        }
        .field {
          background-color: #e0e0e0;
        }
        /* Observaciones y valor a girar */
        .obs-table {
          width: 100%;
          border-collapse: collapse;
          margin-top: 25px; /* espacio extra */
        }
        .obs-table td {
          border: 1px solid #ccc;
          padding: 6px;
          font-size: 11px;
        }
        .obs-label {
          background-color: #f0f0f0;
          font-weight: bold;
          width: 15%;
        }
        .obs-field {
          background-color: #e0e0e0;
        }
      </style>
    </head>
    <body>

      <!-- Encabezado -->
      <table class="header-table">
        <tr>
          <td style="width: 90px;">
            <img src="${logoUrl}" alt="Logo" class="logo" />
          </td>
          <td class="title">APROBACIÓN DE ANTICIPO</td>
        </tr>
      </table>

      <!-- Sección Identificación / Proveedor / Dirección + Consecutivo / Fecha / Teléfono -->
      <table style="width: 100%; border-collapse: collapse; font-size: 12px;">
        <tr>
          <td style="width: 50%;"></td>
          <td style="width: 50%; vertical-align: top;">
            <table style="width: 100%; border-collapse: collapse;">
              <tr>
                <td style="font-weight: bold; padding: 6px; width: 40%;">CONSECUTIVO</td>
                <td style="background-color: #d0d0d0; padding: 6px;">${solicitud.consecutive}</td>
              </tr>
            </table>
          </td>
        </tr>
        <tr>
          <td style="width: 50%; vertical-align: top; padding-right: 5px;">
            <div style="margin-bottom: 4px;">
              <strong>IDENTIFICACIÓN:</strong> ${solicitud.supplierTaxId}
            </div>
            <div>
              <strong>PROVEEDOR:</strong> ${solicitud.supplierName}
            </div>
          </td>
          <td style="width: 50%; vertical-align: top; padding-left: 5px;">
            <table style="width: 100%; border-collapse: collapse; height: 100%;">
              <tr>
                <td style="font-weight: bold; padding: 6px; width: 40%;" rowspan="2">FECHA</td>
                <td style="padding: 6px;" rowspan="2">
                  ${new Date(solicitud.requestDate).toLocaleDateString('es-CO')}
                </td>
              </tr>
            </table>
          </td>
        </tr>
        <tr>
          <td style="width: 50%; vertical-align: top; padding-right: 5px;">
            <div>
              <strong>DIRECCIÓN:</strong> ${solicitud.supplierAddress}
            </div>
          </td>
          <td style="width: 50%; vertical-align: top; padding-left: 5px;">
            <table style="width: 100%; border-collapse: collapse;">
              <tr>
                <td style="font-weight: bold; padding: 6px; width: 40%;">TELÉFONO</td>
                <td style="padding: 6px;">${solicitud.supplierPhone}</td>
              </tr>
            </table>
          </td>
        </tr>
      </table>

      <!-- Tabla horizontal con títulos en primera fila y valores en segunda -->
      <table class="fin-table">
        <tr>
          <td class="label">CENTRO DE COSTOS</td>
          <td class="label">CONCEPTO</td>
          <td class="label">BASE</td>
          <td class="label">IVA</td>
          <td class="label">TOTAL</td>
          <td class="label">%</td>
          <td class="label">VALOR A PAGAR</td>
        </tr>
        <tr>
          <td class="field">${solicitud.costCenter}</td>
          <td class="field">${solicitud.concept}</td>
          <td class="field">$${solicitud.baseAmount.toLocaleString('es-CO')}</td>
          <td class="field">$${solicitud.vatTotal.toLocaleString('es-CO')}</td>
          <td class="field">$${solicitud.totalAdvance.toLocaleString('es-CO')}</td>
          <td class="field">${solicitud.approvedPercentage}%</td>
          <td class="field">$${solicitud.amountToTransfer.toLocaleString('es-CO')}</td>
        </tr>
      </table>

      <!-- Observaciones y Valor a girar en una sola fila -->
      <table class="obs-table">
        <tr>
          <td class="obs-label">OBSERVACIONES</td>
          <td class="obs-field">${solicitud.notes || ''}</td>
          <td class="obs-label">VALOR A GIRAR</td>
          <td class="obs-field">$${solicitud.amountToTransfer.toLocaleString('es-CO')}</td>
        </tr>
        <tr>
          <td class="obs-label">RESPONSABLE</td>
          <td class="obs-field">${solicitud.responsible}</td>
          <td class="obs-field" colspan="2">Tener presente retenciones</td>
        </tr>
      </table>

      <!-- Sección de firmas -->
      <table style="width: 100%; border-collapse: collapse; margin-top: 30px; font-size: 11px;">
        <tr>
          <!-- Elaboró -->
          <td style="width: 50%; text-align: center; vertical-align: top; padding: 10px;">
            <div style="margin-bottom: 40px;">
              <!-- Aquí irá la imagen de la firma -->
              <img src="FIRMA_ELABORO_URL" alt="Firma Elaboró" style="max-height: 50px;">
            </div>
            <div style="border-top: 1px solid #000; width: 80%; margin: 0 auto;"></div>
            <div>Elaboró</div>
            <div><strong>${solicitud.elaboroNombre}</strong></div>
            <div>Nombre:</div>
          </td>
      
          <!-- Aprobó -->
          <td style="width: 50%; text-align: center; vertical-align: top; padding: 10px;">
            <div style="margin-bottom: 40px;">
              <!-- Aquí irá la imagen de la firma -->
              <img src="FIRMA_APROBO_URL" alt="Firma Aprobó" style="max-height: 50px;">
            </div>
            <div style="border-top: 1px solid #000; width: 80%; margin: 0 auto;"></div>
            <div>Aprobó</div>
            <div><strong>${solicitud.aproboNombre}</strong></div>
            <div>Nombre:</div>
          </td>
        </tr>
      </table>
      
      <!-- Alertas en rojo -->
      <div style="color: red; font-size: 10px; margin-top: 20px; line-height: 1.4;">
        * Por favor diligenciar los campos sombreados de color gris<br>
        * Por favor diligenciar en observaciones, la actividad o destino del anticipo<br>
        * Radicar por trámites internos en SGD.<br>
        * El formato debe venir firmado en su totalidad
      </div>


    </body>
  </html>
  `;
}

/**
 * Controlador que genera el PDF y lo envía al cliente
 */
exports.descargarPDF = async (req, res) => {
  const { id } = req.params;
  const solicitud = await prisma.advanceRequest.findUnique({
    where: { id: Number(id) },
    include: { company: true }
  });
  if (!solicitud) return res.status(404).json({ error: 'Solicitud no encontrada' });

  const html = generarHTML(solicitud, "https://drive.google.com/file/d/1i3E2G6u_zjMj5Eaz9AFu-Wf6JacL84Sj/view?usp=drive_link");
  const browser = await puppeteer.launch();
  const page = await browser.newPage();
  await page.setContent(html, { waitUntil: 'networkidle0' });

  const pdfBuffer = await page.pdf({
    format: 'A4',
    printBackground: true,
    landscape: true, // 👈 Esto pone la hoja en horizontal
    margin: { top: '40px', bottom: '40px', left: '40px', right: '40px' }
  });
  await browser.close();

  res.setHeader('Content-Type', 'application/pdf');
  res.setHeader('Content-Disposition', `attachment; filename=anticipo_${solicitud.consecutive}.pdf`);
  res.send(pdfBuffer);
};
