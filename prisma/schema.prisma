// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int     @id @default(autoincrement())  
  rolId     Int
  rol       Rol @relation(fields: [rolId], references: [id])
  document  String
  names     String
  lastNames String
  email     String  @unique
  password  String
  advanceRequests    AdvanceRequest[]
  createdAt DateTime @default(now())
}

model Company {
  id                 Int      @id @default(autoincrement())
  taxId              String   @unique        // NIT
  businessName       String                  // Razón Social
  location           String?                 // Ubicación
  email              String   @unique
  address            String?                 // Dirección
  logoUrl            String?                 // Company logo
  consecutiveId      Int
  consecutive        Consecutive @relation(fields: [consecutiveId], references: [id])
  sendConfirmation   Boolean  @default(false) // Checkbox
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  advanceRequests    AdvanceRequest[]
}

model AdvanceRequest {
  id                  Int      @id @default(autoincrement())
  companyId           Int
  company             Company  @relation(fields: [companyId], references: [id])
 
  statusId            Int
  status              Status   @relation(fields: [statusId], references: [id])

  userId            Int
  users              User   @relation(fields: [userId], references: [id])
  consecutive         String
  requestDate         DateTime

  supplierTaxId       String
  supplierName        String
  supplierAddress     String?
  supplierPhone       String?

  costCenter          String
  concept             String
  baseAmount          Float
  vatRate             String
  vatTotal            Float?
  approvedPercentage  Float
  totalAdvance        Float
  amountToTransfer    Float

  notes               String?
  responsible         String
  preparedBy          String
  approvedBy          String

  documentUrl         String? // PDF file path or URL

  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
}

model Status {
  id          Int               @id @default(autoincrement())
  name        String            @unique
  description String?
  requests    AdvanceRequest[]  // Relación inversa
}

model Rol {
  id          Int               @id @default(autoincrement())
  name        String            @unique
  description String?
  users       User[]  // Relación inversa
}


model Consecutive {
  id          Int               @id @default(autoincrement())
  name        String            @unique
  description String?
  Companies   Company[]  // Relación inversa
}